import std;backend server1 { .host = "192.168.6.236"; .port = "80";}backend server2 { .host = "192.168.6.237"; .port = "80";}director webgroup random { {  .backend = server1;  .weight = 1; } {  .backend = server2;  .weight = 1; }}acl purge { "localhost"; "127.0.0.1";}sub vcl_recv { if (req.request == "PURGE") {  if (!client.ip ~ purge) {   error 405 "Not allowed";  }  return(lookup); } std.log("LOG_DEBUG: URL=" + req.url); set req.backend = webgroup; if (req.request != "GET" && req.request != "HEAD" && req.request != "PUT" && req.request != "POST" && req.request != "TRACE" && req.request != "OPTIONS" && req.request != "DELETE") {  return(pipe); } if (req.request != "GET" && req.request != "HEAD") {  std.log("LOG_DEBUG: req.request not get! " + req.request);  return(pass); } if (req.http.Cache-Control ~ "no-cache") {  std.log("LOG_DEBUG: req is no-cached");  return(pass); } if (req.url ~ "^/[^?]+\.(jpeg|jpg|png|gif|bmp|js|css|txt|zip|exe|html|htm)(\?.*|)$") {  std.log("*** url is jpeg|jpg|png|gif|bmp|js|css|txt|zip|html|htm!***");  unset req.http.cookie;  if (req.http.Accept-Encoding) {   if (req.url ~ "\.(jpg|png|gif|jpeg)(\?.*|)$") {    remove req.http.Accept-Encoding;   } elsif (req.http.Accept-Encoding ~ "gzip") {    set req.http.Accept-Encoding = "gzip";   } elsif (req.http.Accept-Encoding ~ "deflate") {    set req.http.Accept-Encoding = "deflate";   } else {    remove req.http.Accept-Encoding;   }  }  return(lookup); } else {  std.log("url is not cached!");  return(pass); }}sub vcl_hit { if (req.request == "PURGE") {  set obj.ttl = 0s;  error 200 "purged."; } return(deliver);}sub vcl_miss { std.log("###cache miss ### url= " + req.url); if (req.request == "PURGE") {  error 404 "Not in varnish match"; }}sub vcl_fetch { if (beresp.status == 500 || beresp.status == 501 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504) {  std.log("beresp.status error!! beresp.status=" + beresp.status);  set req.http.host = "status";  set beresp.saintmode = 20s;  return(restart); } if (beresp.http.Pragma ~ "no-cache" || beresp.http.Cache-Control ~ "no-cache" || beresp.http.Cache-Control ~ "private") {  std.log("now allow cached beresp.http.Cache-Control=" + beresp.http.Cache-Control);  return(hit_for_pass); } if (beresp.ttl <= 0s || beresp.http.Set-Cookie || beresp.http.Vary == "*") {  set beresp.ttl = 120s;  return(hit_for_pass); } if (req.request == "GET" && req.url ~ "\.(css|js|html|htm)$") {  std.log("gzip is enable.");  set beresp.do_gzip = true;  set beresp.ttl = 20s; } if (req.request == "GET" && req.url ~ "/[^?]+\.(jpeg|png|gif|bmp|ico|js|css|swf|zip|exe)(\?.*|)$") {  std.log("url css|js|gif|jpeg|png|jpg|swf| is cache 5m!");  set beresp.ttl = 5m; }elsif (req.request == "GET" && req.url ~ "\.(html|htm)$") {  set beresp.ttl = 30s; }else {  return(hit_for_pass); } if (!req.backend.healthy) {  std.log("eq.backend not healthy req.grace =1m");  set req.grace = 1m; } else {  set req.grace = 20s; } return(deliver);}sub vcl_deliver { if (obj.hits>0) {  set resp.http.X-Cache = "has cache"; }else {  } return(deliver);}